<launch>
  <!-- <arg name="scan_topic"  default="/m2wr/laser/scan" />
  <arg name="base_frame"  default="link_chassis"/>
  <arg name="odom_frame"  default="odom"/> -->

  <arg name="scan_topic"  default="scan" />
  <arg name="base_frame"  default="base_footprint"/>
  <arg name="odom_frame"  default="odom"/>

  <arg name="robot" default="machines"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="pause" default="false"/>
  <arg name="world" default="world03" />

  <arg name="x_pos" default="-1.0"/> 
  <arg name="y_pos" default="0.0"/>

  <arg name="z_pos" default="0.0"/>
  <!-- <arg name="yaw_init" default="3.14"/> -->
  <arg name="yaw_init" default="0.0"/>

  <arg name="multi_robot_name" default=""/>
  <arg name="slam_methods" default="gmapping"/>
  <arg name="use_gmapping" default="false"/>

  <arg name="use_hector" default="false"/>
  <arg name="map_size" default="2048"/>
  <arg name="pub_map_odom_transform" default="true"/>

  <arg name="use_amcl" default="false"/>
  <arg name="map_file" default="/home/isircu/map.yaml"/>

  <arg name="use_move_base" default="false"/>
  <arg name="move_forward_only" default="true"/>

  <arg name="use_tb3" default="false"/>
  <arg name="use_2wd" default="false"/>
  <arg name="use_m2wr" default="false"/>

  <arg name="first_tb3"  default="tb3_0"/>
  <arg name="second_tb3" default="tb3_1"/>
  <arg name="third_tb3"  default="tb3_2"/>

  <arg name="first_tb3_x_pos" default="-1.0"/>
  <arg name="first_tb3_y_pos" default="0.0"/>
  <arg name="first_tb3_z_pos" default=" 0.0"/>
  <arg name="first_tb3_yaw"   default=" 1.57"/>

  <arg name="second_tb3_x_pos" default=" 0.0"/>
  <arg name="second_tb3_y_pos" default="0.0"/>
  <arg name="second_tb3_z_pos" default=" 0.0"/>
  <arg name="second_tb3_yaw"   default=" 1.57"/>

  <arg name="third_tb3_x_pos" default=" 0.0"/>
  <arg name="third_tb3_y_pos" default=" 3.0"/>
  <arg name="third_tb3_z_pos" default=" 0.0"/>
  <arg name="third_tb3_yaw"   default=" 0.0"/>


  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- <arg name="world_name" value="$(find my_worlds)/worlds/$(arg world).world"/> -->
    <arg name="world_name" value="$(find got_node)/worlds/maze_bug3.world"/>
    <!-- <arg name="world_name" value="$(find got_node)/worlds/maze_bug2.world"/> -->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg pause)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="$(arg headless)"/>
    <!-- <env name="GAZEBO_MODEL_PATH" value="$(find simulation_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)"/> -->
  </include>

  <!-- <include file="$(find m2wr_description)/launch/spawn.launch">
      <arg name="y" value="0" />
      <arg name="x" value="-1" />
  </include> -->

  <group if="$(arg use_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro" />

    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -model turtlebot3_burger -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw_init) -param robot_description" />
  </group>

  <group if="$(arg use_m2wr)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find got_node)/urdf/m2wr.xacro'" />
    
    <node name="mybot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param robot_description -model m2wr -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw_init) -param robot_description" />
  </group>

  <group if="$(arg use_2wd)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find got_node)/urdf/2wd.xacro'" />
    
    <node name="mybot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param robot_description -model m2wr -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw_init) -param robot_description" />
  </group>

    <!-- Multirobot launch -->
  <group ns = "$(arg first_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg first_tb3)" />
    </node>
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg first_tb3) -x $(arg first_tb3_x_pos) -y $(arg first_tb3_y_pos) -z $(arg first_tb3_z_pos) -Y $(arg first_tb3_yaw) -param robot_description" />
  </group>


  <group ns = "$(arg second_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg second_tb3)" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -Y $(arg second_tb3_yaw) -param robot_description" />
  </group>

  <group ns = "$(arg third_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg third_tb3)" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg third_tb3) -x $(arg third_tb3_x_pos) -y $(arg third_tb3_y_pos) -z $(arg third_tb3_z_pos) -Y $(arg third_tb3_yaw) -param robot_description" />
  </group>
  

    <!-- send fake joint values -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="False"/>
  </node>

  <!-- Combine joint values -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> -->
  <!-- <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" value="$(arg multi_robot_name)"/>
  </node> -->
  
  <!-- <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find motion_plan)/launch/gmapping_odom.rviz" ></node> -->
    <!-- <node pkg="rviz" type="rviz" name="rviz"></node> -->

  <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
  <!-- <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
    <arg name="base_frame" value="$(arg base_frame)"/>
    <arg name="scan_topic" value="$(arg scan_topic)"/>
  </include> -->

  <group if="$(arg use_gmapping)">
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
      <param name="base_frame" value="$(arg base_frame)"/>
      <param name="odom_frame" value="$(arg odom_frame)"/>
      <param name="map_update_interval" value="2.0"/>
      <param name="maxUrange" value="3.0"/>
      <param name="maxRange" value="8.0"/>
      <param name="sigma" value="0.05"/>
      <param name="kernelSize" value="1"/>
      <param name="lstep" value="0.05"/>
      <param name="astep" value="0.05"/>
      <param name="iterations" value="5"/>
      <param name="lsigma" value="0.075"/>
      <param name="ogain" value="3.0"/>
      <param name="lskip" value="0"/>
      <param name="minimumScore" value="50"/>
      <param name="srr" value="0.1"/>
      <param name="srt" value="0.2"/>
      <param name="str" value="0.1"/>
      <param name="stt" value="0.2"/>
      <param name="linearUpdate" value="1.0"/>
      <param name="angularUpdate" value="0.2"/>
      <param name="temporalUpdate" value="0.5"/>
      <param name="resampleThreshold" value="0.5"/>
      <param name="particles" value="100"/>
    <!--
      <param name="xmin" value="-50.0"/>
      <param name="ymin" value="-50.0"/>
      <param name="xmax" value="50.0"/>
      <param name="ymax" value="50.0"/>
    make the starting size small for the benefit of the Android client's memory...
    -->
      <param name="xmin" value="-10.0"/>
      <param name="ymin" value="-10.0"/>
      <param name="xmax" value="10.0"/>
      <param name="ymax" value="10.0"/>

      <param name="delta" value="0.05"/>
      <param name="llsamplerange" value="0.01"/>
      <param name="llsamplestep" value="0.01"/>
      <param name="lasamplerange" value="0.005"/>
      <param name="lasamplestep" value="0.005"/>
      <remap from="scan" to="$(arg scan_topic)"/>
    </node>
  </group>  

  <group if="$(arg use_hector)">
    <!-- Hector mapping -->
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
      <!-- Frame names -->
      <param name="map_frame"  value="map" />
      <param name="odom_frame" value="$(arg odom_frame)" />
      <param name="base_frame" value="$(arg base_frame)" />

      <!-- Tf use -->
      <param name="use_tf_scan_transformation"  value="true"/>
      <param name="use_tf_pose_start_estimate"  value="false"/>
      <param name="pub_map_scanmatch_transform" value="true" />
      <param name="pub_map_odom_transform"      value="$(arg pub_map_odom_transform)"/>
      <param name="tf_map_scanmatch_transform_frame_name" value="scanmatcher_frame" />

      <!-- Map size / start point -->
      <param name="map_resolution" value="0.050"/>
      <param name="map_size"       value="$(arg map_size)"/>
      <param name="map_start_x"    value="0.5"/>
      <param name="map_start_y"    value="0.5" />
      <param name="map_multi_res_levels" value="2" />

      <!-- Map update parameters -->
      <param name="update_factor_free"         value="0.4"/>
      <param name="update_factor_occupied"     value="0.9" />   
      <param name="map_update_distance_thresh" value="0.1"/>
      <param name="map_update_angle_thresh"    value="0.04" />
      <param name="map_pub_period"             value="2" />
      <param name="laser_z_min_value"          value= "-0.1" />
      <param name="laser_z_max_value"          value= "0.1" />
      <param name="laser_min_dist"             value="0.12" />
      <param name="laser_max_dist"             value="3.5" />

      <!-- Advertising config -->
      <param name="advertise_map_service"      value="true"/> 
      <param name="scan_subscriber_queue_size" value="5"/>
      <param name="scan_topic" value="$(arg scan_topic)"/>

      <!-- Debug parameters -->
      <!--
        <param name="output_timing"    value="false"/>
        <param name="pub_drawings"     value="true"/>
        <param name="pub_debug_output" value="true"/>
      -->
    </node>
  </group>

  <group if="$(arg use_amcl)">

    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/> 
    <!-- AMCL -->
    <node pkg="amcl" type="amcl" name="amcl">

      <param name="min_particles"             value="500"/>
      <param name="max_particles"             value="3000"/>
      <param name="kld_err"                   value="0.02"/>
      <param name="update_min_d"              value="0.20"/>
      <param name="update_min_a"              value="0.20"/>
      <param name="resample_interval"         value="1"/>
      <param name="transform_tolerance"       value="0.5"/>
      <param name="recovery_alpha_slow"       value="0.00"/>
      <param name="recovery_alpha_fast"       value="0.00"/>
      <param name="initial_pose_x"            value="$(arg x_pos)"/>
      <param name="initial_pose_y"            value="$(arg y_pos)"/>
      <param name="initial_pose_a"            value="0.0"/>
      <param name="gui_publish_rate"          value="50.0"/>

      <remap from="scan"                      to="$(arg scan_topic)"/>
      <param name="laser_max_range"           value="3.5"/>
      <param name="laser_max_beams"           value="180"/>
      <param name="laser_z_hit"               value="0.5"/>
      <param name="laser_z_short"             value="0.05"/>
      <param name="laser_z_max"               value="0.05"/>
      <param name="laser_z_rand"              value="0.5"/>
      <param name="laser_sigma_hit"           value="0.2"/>
      <param name="laser_lambda_short"        value="0.1"/>
      <param name="laser_likelihood_max_dist" value="2.0"/>
      <param name="laser_model_type"          value="likelihood_field"/>

      <param name="odom_model_type"           value="diff"/>
      <param name="odom_alpha1"               value="0.1"/>
      <param name="odom_alpha2"               value="0.1"/>
      <param name="odom_alpha3"               value="0.1"/>
      <param name="odom_alpha4"               value="0.1"/>
      <param name="odom_frame_id"             value="odom"/>
      <param name="base_frame_id"             value="$(arg base_frame)"/>

    </node>
  </group>

  <group if="$(arg use_move_base)"> 
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" required = "true" output="screen">
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
      <rosparam file="$(find got_node)/config/tb3burger/costmap_common_params_burger.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find got_node)/config/tb3burger/costmap_common_params_burger.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find got_node)/config/tb3burger/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find got_node)/config/tb3burger/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find got_node)/config/tb3burger/move_base_params.yaml" command="load" />
      <rosparam file="$(find got_node)/config/tb3burger/dwa_local_planner_params_burger.yaml" command="load" />
      <!-- <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/> -->
      <!-- <remap from="odom" to="$(arg odometry_filtered_topic)" if="$(arg use_robot_localization)"/> -->
      <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>

    <node pkg="got_node" type="move_base_goal_publisher" name="move_base_goal_publisher" output="screen" />

    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
  </group>


</launch>
